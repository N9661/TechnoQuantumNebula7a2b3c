local _xJ7qP2rS5tU8vW0zA3bC6dE9fG1hJ4kL = {}

local _executionMarker = newproxy(true)
getmetatable(_executionMarker).__tostring = function() return "SystemCore" end

local function _checkEnvironment()
    if _G._systemSecurityFlag then
        return false
    end
    
    _G._systemSecurityFlag = _executionMarker
    
    local env = getfenv(0)
    local suspiciousFunctions = {
        "hookfunction", "hookmetamethod", "replaceclosure", "setreadonly",
        "make_writeable", "setclipboard", "getgc", "getconnections",
        "firesignal", "fireclickdetector"
    }
    
    for _, funcName in ipairs(suspiciousFunctions) do
        if env[funcName] then
            return false
        end
    end
    
    local success, result = pcall(function()
        local originalGetService = game.GetService
        return originalGetService == game.GetService
    end)
    
    if not success then
        return false
    end
    
    local success2, result2 = pcall(function()
        local RbxAnalytics = game:GetService("RbxAnalyticsService")
        local originalGetClientId = RbxAnalytics.GetClientId
        return originalGetClientId == RbxAnalytics.GetClientId
    end)
    
    if not success2 then
        return false
    end
    
    local success3, result3 = pcall(function()
        local Players = game:GetService("Players")
        local originalGetLocalPlayer = Players.GetLocalPlayer
        return originalGetLocalPlayer == Players.GetLocalPlayer
    end)
    
    if not success3 then
        return false
    end
    
    return true
end

-- Fixed whitelist data with proper line breaks
local _7xQ9pL3mN5vR2bC8dE0fG = [[
fba07e1-e7a1-e7a1-4082-ad2d-877b7094797b,HVX_Havoc,v1
fba07e1-e7a1-e7a1-4082-ad2d-877b7094797b,HVX_Havoc,v1
]]

function _xJ7qP2rS5tU8vW0zA3bC6dE9fG1hJ4kL:_v3R7fD9sA2qP5mN()
    if not _checkEnvironment() then
        return false
    end
    
    local _p1 = game:GetService("Players")
    local _r2 = game:GetService("RbxAnalyticsService")
    
    local _c3, _i4
    
    local success, result = pcall(function()
        return _p1.LocalPlayer.Name
    end)
    
    if not success then
        return false
    else
        _c3 = result
    end
    
    local success2, result2 = pcall(function()
        return _r2:GetClientId()
    end)
    
    if not success2 then
        return false
    else
        _i4 = result2
    end
    
    local startTime = os.clock()
    local counter = 0
    for i = 1, 10000 do
        counter = counter + i
    end
    local endTime = os.clock()
    
    if endTime - startTime > 0.1 then
        return false
    end
    
    -- Add debug output
    print("Current user: " .. _c3)
    print("Current ClientId: " .. _i4)
    
    for _d5 in string.gmatch(_7xQ9pL3mN5vR2bC8dE0fG, "[^\r\n]+") do
        if _d5 and _d5 ~= "" then
            local _v6, _u7, _checksum = _d5:match("([^,]+),([^,]+),([^,]+)")
            
            -- Add debug output
            print("Checking against: " .. tostring(_v6) .. ", " .. tostring(_u7))
            
            if _checksum ~= "v1" then
                print("Checksum mismatch")
                return false
            end
            
            if _u7 == _c3 and _v6 == _i4 then
                if #_u7 == #_c3 then
                    print("User authorized!")
                    return true
                end
            end
        end
    end
    
    print("No matching whitelist entry found")
    return false
end

function _xJ7qP2rS5tU8vW0zA3bC6dE9fG1hJ4kL:_g8H2jK6lM0nO4pQ()
    if not _checkEnvironment() then
        return "ERROR"
    end
    return game:GetService("RbxAnalyticsService"):GetClientId()
end

function _xJ7qP2rS5tU8vW0zA3bC6dE9fG1hJ4kL:_a9B3cD7eF1gH5iJ()
    if not _checkEnvironment() then
        return "ERROR"
    end
    return game:GetService("Players").LocalPlayer.Name
end

local mt = getmetatable(_xJ7qP2rS5tU8vW0zA3bC6dE9fG1hJ4kL) or {}
setmetatable(_xJ7qP2rS5tU8vW0zA3bC6dE9fG1hJ4kL, mt)

mt.__index = function(t, k)
    if k ~= "_v3R7fD9sA2qP5mN" and k ~= "_g8H2jK6lM0nO4pQ" and k ~= "_a9B3cD7eF1gH5iJ" then
        for k, v in pairs(t) do
            t[k] = nil
        end
        return function() return false end
    end
    return rawget(t, k)
end

return _xJ7qP2rS5tU8vW0zA3bC6dE9fG1hJ4kL
